1
00:00:00,000 --> 00:00:03,720
假设你是 Parch & Posey 的客户经理

2
00:00:03,720 --> 00:00:05,580
你正要启程

3
00:00:05,580 --> 00:00:08,189
去拜访最重要的客户之一 你想要在到访之前做好准备

4
00:00:08,189 --> 00:00:13,439
也就是说你要确保自己了解客户最近的所有订单

5
00:00:13,439 --> 00:00:15,539
你可以用 WHERE 子句来生成列表

6
00:00:15,539 --> 00:00:19,535
列出那位客户的所有订单

7
00:00:19,535 --> 00:00:22,469
WHERE 子句能让你用一些具体的标准来筛选一系列结果

8
00:00:22,469 --> 00:00:26,469
就像你在 Excel 里用的筛选功能

9
00:00:26,469 --> 00:00:30,754
不过用 WHERE 筛选功能 你能问答更有意义的问题

10
00:00:30,754 --> 00:00:33,494
以后大多数查询你都会用到它

11
00:00:33,494 --> 00:00:37,559
WHERE 子句位于 FROM 后 但是在 ORDER BY 或 LIMIT 前

12
00:00:37,560 --> 00:00:39,880
就像之前的查询

13
00:00:39,880 --> 00:00:43,780
子句必须按照正确的顺序来写 否则查询会提示错误

14
00:00:43,780 --> 00:00:45,575
作为客户经理

15
00:00:45,575 --> 00:00:48,925
我们要写一个查询 仅呈现高级客户的订单

16
00:00:48,924 --> 00:00:53,189
在这里以账户 ID 4251 来表示

17
00:00:53,189 --> 00:00:59,244
我们就是要写这么一个简单的等式 WHERE account_id = 4251

18
00:00:59,244 --> 00:01:02,379
这就能生成一个结果集

19
00:01:02,380 --> 00:01:07,000
囊括了所有账户 ID 列值等于 4251 的行

20
00:01:07,000 --> 00:01:11,840
使用 SQL 时 整一行数据都会得到完整保留

21
00:01:11,840 --> 00:01:15,880
如果你写了个 WHERE 子句 根据一列的值来筛选数据 就像我们在这里做的

22
00:01:15,879 --> 00:01:21,295
结果就会受到限制 只呈现出满足条件的行

23
00:01:21,295 --> 00:01:23,829
背后的原理就是每一行都是一个数据点或观察数据

24
00:01:23,829 --> 00:01:28,795
该行所包含的所有信息是一个整体

25
00:01:28,795 --> 00:01:32,409
在这里 一行里的所有信息都与一笔纸张订单有关

